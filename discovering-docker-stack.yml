heat_template_version: ocata

description: template for the network, the sub-network, the bastion and security groups

parameters:
  key:
    type: string
    description: Key Name

resources:
  external_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Open only port 22 for accessing the servers from the outside"
      name: "external_security_group"
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
  
  internal_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Open all the ports for accessing the servers from the private network"
      name: "internal_security_group"
      rules:
        - remote_ip_prefix: 192.168.2.0/24
          protocol: tcp
        - remote_ip_prefix: 192.168.2.0/24
          protocol: udp
        - remote_ip_prefix: 192.168.2.0/24
          protocol: icmp

  private_net:
    type: OS::Neutron::Net
    properties:
      name: "private_net"

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: "192.168.2.0/24"
      dns_nameservers: [ "192.44.75.10" ]
      ip_version: 4
      allocation_pools:
        - start: "192.168.2.200"
          end: "192.168.2.254"
      name: "private_subnet"

  gateway_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: external
      name: "gateway_router"

  gateway_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: gateway_router}
      subnet_id: { get_resource: private_subnet}

  S1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net}
      security_groups: [ get_resource: external_security_group, get_resource: internal_security_group]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet}
          ip_address: 192.168.2.10

  S1:
    type: OS::Nova::Server
    properties:
      name: S1
      image: ubuntu_16.04.latest
      flavor: m1.small
      key_name: { get_param: key}
      networks:
        - port: { get_resource: S1_port}
      user_data: |
        #!/bin/bash
        export IP=`ifconfig ens3 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF
        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy
        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        apt-get -y update
        apt-get -y upgrade
        apt-get install -y python
        reboot

  floating_ip1:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: external
      port_id: { get_resource: S1_port}

  S2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net}
      security_groups: [ get_resource: external_security_group, get_resource: internal_security_group]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet}
          ip_address: 192.168.2.11

  S2:
    type: OS::Nova::Server
    properties:
      name: S2
      image: ubuntu_16.04.latest
      flavor: m1.small
      key_name: { get_param: key}
      networks:
        - port: { get_resource: S2_port}
      user_data: |
        #!/bin/bash
        export IP=`ifconfig ens3 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
        export HOSTNAME=`hostname`
        tee -a /etc/hosts <<EOF
        $IP $HOSTNAME
        EOF
        export DEBIAN_FRONTEND=noninteractive
        export TERM="xterm"
        echo 'Acquire::http::Proxy "http://apt-cacher-01.priv.enst-bretagne.fr:3142";' > /etc/apt/apt.conf.d/01proxy
        localectl set-locale LANG=en_US.UTF-8 LANGUAGE="en_US:en"
        apt-get -y update
        apt-get -y upgrade
        apt-get install -y python
        reboot

  floating_ip2:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: external
      port_id: { get_resource: S2_port}
