---
# based on the example at http://coderobot.downley.net/swagger-driven-testing-in-python.html

swagger: '2.0'
info:
  title: Backend service API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json

paths:
  /gallery/{display_name}:
    get:
      operationId: backend_service.get_photos
      summary: Get photos 
      parameters:
        - $ref: '#/parameters/display_name'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/limit'
      responses:
        200:
          description: Returns a list of photos URIs
          schema:
            type: array
            items:
              type: string
        404:
          description: The display_name was not found

    post:
      operationId: backend_service.upload_photo
      consumes:
        - multipart/form-data
      summary: Upload a new photo
      parameters:
        - $ref: '#/parameters/display_name'
        - $ref: '#/parameters/upfile'
      responses:
        201:
          description: Created
        404:
          description: The display_name was not found

  /photo/{display_name}/{photo_id}:
    get:
      operationId: backend_service.get_photo
      produces:
        - image/jpeg
      summary: Get photo
      parameters:
        - $ref: '#/parameters/display_name'        
        - $ref: '#/parameters/photo_id'    
      responses:
        200:
          description: Return the requested photo
          schema:
            type: file
        404:
          description: The display_name or the photo_id was not found
    delete:
      operationId: backend_service.delete_photo
      summary: Remove a photo
      parameters:
        - $ref: '#/parameters/display_name'
        - $ref: '#/parameters/photo_id'    
      responses:
        204:
          description: Photo was deleted.
        404:
          description: The display_name or the photo_id was not found

  /photo/{display_name}/{photo_id}/attributes:
    get:
      operationId: backend_service.get_photo_attributes
      summary: Get photo attributes
      parameters:
        - $ref: '#/parameters/display_name'        
        - $ref: '#/parameters/photo_id'    
      responses:
        200:
          description: Return the attributes of the requested photo
          schema:
            $ref: '#/definitions/PhotoAttributes'
        404:
          description: The display_name or the photo_id was not found
    put:
      operationId: backend_service.set_photo_attributes
      summary: Set photo attributes
      parameters:
        - $ref: '#/parameters/display_name'        
        - $ref: '#/parameters/photo_id'    
        - in: body
          name: attributes
          schema:
            $ref: '#/definitions/PhotoAttributes'
      responses:
        201:
          description: OK
        404:
          description: The display_name or the photo_id was not found

  /photographers:
    post:
      operationId: backend_service.post_photographers
      summary: Create a new photographer
      parameters:
        - name: photographer
          in: body
          schema:
            $ref: '#/definitions/Photographer'
      responses:
        201:
          description: New photographer created
        409:
          description: Photographer already exists with this display_name
    get:
      operationId: backend_service.get_photographers
      summary: Get all photographers
      parameters:
        - name: offset
          in: query
          type: integer
          minimum: 0
          default: 0
          x-example: 0
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 10
          x-example: 10
      responses:
        200:
          description: Returns a list of photographers URIs
          schema:
            type: array
            items:
              type: string
  /photographer/{display_name}:
    get:
      # tags: [Photographer]
      operationId: backend_service.get_photographer
      summary: Get a single photographer.
      parameters:
        - $ref: '#/parameters/display_name'
      responses:
        200:
          description: Return the requested photographer.
          schema:
            $ref: '#/definitions/Photographer'
        404:
          description: Photographer does not exist.
    delete:
      operationId: backend_service.delete_photographer
      summary: Remove a photographer.
      parameters:
        - $ref: '#/parameters/display_name'
      responses:
        204:
          description: Photographer was deleted.
        404:
          description: Photographer does not exist.

parameters:
  display_name:
    name: display_name
    description: Display Name of a photographer
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"
    x-example: 'jean'

  upfile:
    name: upfile
    in: formData
    type: file
    required: true
    description: the JPEG file to upload

  offset:
    name: offset
    description: offset
    in: query
    type: integer
    minimum: 0
    default: 0
    x-example: 0

  limit:
    name: limit
    description: offset
    in: query
    type: integer
    minimum: 0
    default: 10
    x-example: 10

  photo_id:
    name: photo_id
    description: Unique identifier of the photo.
    in: path
    type: string
    required: true
    default: "1"
    x-example: "1"

definitions:
  Photographer:
    type: object
    properties:
      display_name:
        type: string
        description: |
          The "nickname" of the user.  This is the name that will be
          shown to other users of the system.
        example: "Susie"
        minLength: 1
        maxLength: 100
      first_name:
        type: string
        description: The first name of the user.
        example: "Louis-Jacques-Mand√© "
        minLength: 1
        maxLength: 100
      last_name:
        type: string
        description: The first name of the user.
        example: "Daguerre"
        minLength: 1
        maxLength: 100
      interests:
        type: array
        description: The type of photos the user is interested in.
        items:
          type: string
        example: ["landscape"]
        minLength: 1

  PhotoAttributes:
    type: object
    properties:
      location:
        type: string
        description: |
          Where the photo has been taken (city, country or region)
        example: "Paris"
        minLength: 1
        maxLength: 100
      title:
        type: string
        description: The title of the photo
        example: "Tour Eiffel"
        minLength: 1
        maxLength: 100
      comment:
        type: string
        description: A comment about the photo
        example: "Paris tour with my Friend joe"
        minLength: 1
        maxLength: 200
      tags:
        type: array
        description: Tags
        items:
          type: string
        example: ["monument", "paris", "eiffel tower"]
        minLength: 1

